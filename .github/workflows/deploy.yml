name: Deploy

# Trigger only after CI workflow completes successfully on main branch
# This ensures deployment only happens when all tests pass
on:
  workflow_run:
    workflows: ['CI']
    types: [completed]
    branches: [main]
  workflow_dispatch: # Allow manual trigger for emergency deployments

permissions:
  id-token: write
  contents: read
  actions: read # Required to download artifacts from CI workflow
  pages: write # Required for GitHub Pages deployment

jobs:
  # Single approval gate for both deployments
  # This job requires manual approval and creates a checkpoint
  approval:
    name: Await Deployment Approval
    # Only run if CI workflow succeeded (skip check for manual dispatch)
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    # Require manual approval via GitHub Environment
    # Configure in: Settings → Environments → production
    environment: production

    steps:
      - name: Approval checkpoint
        run: |
          echo "## Deployment Approved :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Approved by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following deployments will proceed:" >> $GITHUB_STEP_SUMMARY
          echo "- AWS S3 + CloudFront" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Pages (Documentation)" >> $GITHUB_STEP_SUMMARY

  # Deploy to AWS S3 + CloudFront
  deploy-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: approval

    steps:
      # Download build artifacts from CI workflow
      # No need to rebuild - use cached artifacts for faster deployment
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: out/
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # AWS authentication using OIDC and Role Chaining
      # Secrets should be configured in the 'production' Environment
      # (not Repository secrets) for additional security
      - name: Configure AWS credentials (Bridge Role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_BRIDGE_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Assume execution role (Role Chaining)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_EXECUTION_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-chaining: true

      - name: Deploy to S3
        run: |
          echo "Uploading to S3 bucket: ${{ secrets.S3_BUCKET_NAME }}"
          aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME }}/ --delete

      - name: Invalidate CloudFront cache
        id: invalidation
        run: |
          echo "Creating CloudFront invalidation for distribution: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "invalidation-id=$INVALIDATION_ID" >> $GITHUB_OUTPUT

      - name: AWS deployment summary
        run: |
          echo "## AWS Deployment Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| S3 Bucket | \`${{ secrets.S3_BUCKET_NAME }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| CloudFront Distribution | \`${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Invalidation ID | \`${{ steps.invalidation.outputs.invalidation-id }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> :hourglass: CloudFront invalidation may take a few minutes to complete." >> $GITHUB_STEP_SUMMARY

  # Deploy documentation to GitHub Pages
  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: approval

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build documentation
        run: npm run docs:build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./docs-site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Documentation deployment summary
        run: |
          echo "## Documentation Deployment Summary :book:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment URL | ${{ steps.deployment.outputs.page_url }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> :sparkles: Documentation is now live!" >> $GITHUB_STEP_SUMMARY
