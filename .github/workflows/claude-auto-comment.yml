name: Claude Auto Comment

on:
  schedule:
    # 23時から翌朝9時まで、1時間に1回実行 (UTC時刻で指定: JST-9h)
    # 23時 (JST) = 14時 (UTC)
    # 0時-8時 (JST) = 15時-23時 (UTC前日), 0時-8時 (UTC)
    - cron: '0 14-23 * * *' # 23時-翌8時 (JST)
    - cron: '0 0-9 * * *' # 9時-18時 (JST) ※このうち0時のみが該当
  workflow_dispatch: # 手動実行も可能

permissions:
  contents: read
  issues: write

jobs:
  auto-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Get highest priority open issue
        id: get_issue
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # 優先度順 (high → medium → low) でopenなissueを取得
          # claude-code-requestedラベルがないものを優先

          # まず、claude-code-requestedラベルがない high priority issue を探す
          ISSUE_NUMBER=$(gh issue list \
            --repo ${{ github.repository }} \
            --label priority:high \
            --state open \
            --json number,title,labels \
            --jq '[.[] | select(.labels | map(.name) | contains(["claude-code-requested"]) | not)] | first | .number // empty')

          # なければ medium priority を探す
          if [ -z "$ISSUE_NUMBER" ]; then
            ISSUE_NUMBER=$(gh issue list \
              --repo ${{ github.repository }} \
              --label priority:medium \
              --state open \
              --json number,title,labels \
              --jq '[.[] | select(.labels | map(.name) | contains(["claude-code-requested"]) | not)] | first | .number // empty')
          fi

          # なければ low priority を探す
          if [ -z "$ISSUE_NUMBER" ]; then
            ISSUE_NUMBER=$(gh issue list \
              --repo ${{ github.repository }} \
              --label priority:low \
              --state open \
              --json number,title,labels \
              --jq '[.[] | select(.labels | map(.name) | contains(["claude-code-requested"]) | not)] | first | .number // empty')
          fi

          # なければ優先度ラベルなしのissueを探す
          if [ -z "$ISSUE_NUMBER" ]; then
            ISSUE_NUMBER=$(gh issue list \
              --repo ${{ github.repository }} \
              --state open \
              --json number,title,labels \
              --jq '[.[] | select(.labels | map(.name) | contains(["claude-code-requested"]) | not)] | first | .number // empty')
          fi

          if [ -z "$ISSUE_NUMBER" ]; then
            echo "has_issue=false" >> $GITHUB_OUTPUT
            echo "対象のissueが見つかりませんでした"
          else
            ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER \
              --repo ${{ github.repository }} \
              --json title \
              --jq '.title')
            echo "has_issue=true" >> $GITHUB_OUTPUT
            echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
            echo "issue_title=$ISSUE_TITLE" >> $GITHUB_OUTPUT
            echo "対象issue: #$ISSUE_NUMBER - $ISSUE_TITLE"
          fi

      - name: Comment on issue with @claude mention
        if: steps.get_issue.outputs.has_issue == 'true'
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh issue comment ${{ steps.get_issue.outputs.issue_number }} \
            --repo ${{ github.repository }} \
            --body "@claude このissueに取り組んでください。作業完了後は必ずPRを作成してください。PRのCIが失敗した場合は修正してください。"

      - name: Add claude-code-requested label
        if: steps.get_issue.outputs.has_issue == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh issue edit ${{ steps.get_issue.outputs.issue_number }} \
            --repo ${{ github.repository }} \
            --add-label "claude-code-requested"

      - name: Summary
        run: |
          if [ "${{ steps.get_issue.outputs.has_issue }}" = "true" ]; then
            echo "✅ Issue #${{ steps.get_issue.outputs.issue_number }} に @claude メンションを投稿しました"
            echo "📝 タイトル: ${{ steps.get_issue.outputs.issue_title }}"
          else
            echo "ℹ️ 処理対象のissueが見つかりませんでした"
            echo "   - claude-code-requestedラベルがついていないopenなissueがありません"
          fi
