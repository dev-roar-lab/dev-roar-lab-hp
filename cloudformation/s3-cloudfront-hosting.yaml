AWSTemplateFormatVersion: '2010-09-09'
Description: 'Static website hosting with S3 and CloudFront for Next.js SSG'

Parameters:
  ProjectName:
    Type: String
    Description: Project name for resource naming
    Default: dev-roar-lab-hp

  DomainName:
    Type: String
    Description: (Optional) Custom domain name (e.g., example.com)
    Default: ''

  ACMCertificateArn:
    Type: String
    Description: (Optional) ARN of ACM certificate in us-east-1 region
    Default: ''

Conditions:
  HasDomainName: !Not [!Equals [!Ref DomainName, '']]
  HasACMCertificate: !Not [!Equals [!Ref ACMCertificateArn, '']]

Resources:
  # S3 Bucket for static website
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-website-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ProjectName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Function for URL rewriting (Next.js SSG support)
  URLRewriteFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub '${ProjectName}-url-rewrite'
      FunctionConfig:
        Comment: 'Rewrite URLs to add index.html for Next.js static export'
        Runtime: cloudfront-js-2.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;

          // トレーリングスラッシュで終わるディレクトリURLにindex.htmlを追加
          if (uri.endsWith('/')) {
            request.uri += 'index.html';
          }
          // 拡張子がないパスにindex.htmlを追加
          else if (!uri.includes('.')) {
            request.uri += '/index.html';
          }

          return request;
        }
      AutoPublish: true

  # Custom Response Headers Policy for Security
  SecurityHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub '${ProjectName}-SecurityHeaders'
        Comment: 'Security headers for Next.js static site'
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000 # 2 years
            IncludeSubdomains: true
            Preload: true
            Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: strict-origin-when-cross-origin
            Override: true
          XSSProtection:
            ModeBlock: true
            Protection: true
            Override: true
          ContentSecurityPolicy:
            ContentSecurityPolicy: "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none'; base-uri 'self'; form-action 'self';"
            Override: true
        CustomHeadersConfig:
          Items:
            - Header: Permissions-Policy
              Value: 'geolocation=(), microphone=(), camera=()'
              Override: true

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CloudFront distribution for ${ProjectName}'
        DefaultRootObject: index.html
        HttpVersion: http2and3
        IPV6Enabled: true
        PriceClass: PriceClass_All

        Aliases: !If
          - HasDomainName
          - - !Ref DomainName
          - !Ref AWS::NoValue

        ViewerCertificate: !If
          - HasACMCertificate
          - AcmCertificateArn: !Ref ACMCertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt CloudFrontOAC.Id
            S3OriginConfig: {}

        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: !Ref SecurityHeadersPolicy # Custom SecurityHeadersPolicy
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt URLRewriteFunction.FunctionMetadata.FunctionARN

        CustomErrorResponses:
          # Return 404 page for not found resources
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
            ErrorCachingMinTTL: 300

        Logging:
          Bucket: !GetAtt LogBucket.DomainName
          Prefix: cloudfront/
          IncludeCookies: false
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # S3 Bucket for CloudFront logs
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      Tags:
        - Key: Project
          Value: !Ref ProjectName

  # Bucket Policy to allow CloudFront OAC
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontServicePrincipal
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

Outputs:
  WebsiteBucketName:
    Description: Name of the S3 bucket
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-DistributionId'

  CloudFrontDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-DomainName'

  CloudFrontHostedZoneId:
    Description: CloudFront Hosted Zone ID (for Route53 Alias record)
    Value: Z2FDTNDATAQYW2

  WebsiteURL:
    Description: Website URL
    Value: !If
      - HasDomainName
      - !Sub 'https://${DomainName}'
      - !Sub 'https://${CloudFrontDistribution.DomainName}'

  LogBucketName:
    Description: Name of the log bucket
    Value: !Ref LogBucket
